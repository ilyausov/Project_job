//---------------------------------------------------------------------------
#ifndef LogicH
#define LogicH
//---------------------------------------------------------------------------
#include "Math.h"
//---------------------------------------------------------------------------
//--ДЕКЛАРИРОВАНИЕ ПЕРЕМЕННЫХ--//
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//--Норма и диагностики--//
//---------------------------------------------------------------------------
#define DIAGN_COUNT   29
#define DIAGN_S_COUNT  3
#define ZIN_COUNT      6
#define OUT_COUNT      6
#define AIK_COUNT      3
#define AOUT_COUNT    1
#define SHR_COUNT     43
#define PAR_ROW       103
#define PAR_COUNT     21
#define PAR_TRANS     8
#define NASMOD_COUNT  22
// типы движений (соответствует типам в контроллере стр.61)
#define ABS 1	// движение в абсолютную позицию
#define OTN 2	// движение на относительный путь
#define CON 7	// "бесконечное" движение на зад. скорости
#define ABS_F 10	// движение в прямом напр. (для циклич.)
#define ABS_R 11	// движение в обратном напр. (для циклич.)
// Переменные драйверов шаг.двиг.
bool PR_PERPAR = 0;
//#define N_mech 5	// количество приводов

unsigned char
	norma = 0,			  // (ПРД) норма
	qkk = 0,			  // (ПРM) код команды
	diagn[DIAGN_COUNT],   // (ПРД) диагностики общие, обнуление перед main
	diagnOld[DIAGN_COUNT],// диагностики архивные
	diagnS[DIAGN_S_COUNT],// (ПРД) диагностики связей с устройствами по RS
	diagnSOld[DIAGN_S_COUNT];// диагностики связей с устройствами архивные

// счетчик кол-ва успешных сеансов связи с СС-10
//unsigned int
//    SS10ConnectCount = 0;
//---------------------------------------------------------------------------
//--Дискретные входы-выходы--//
//---------------------------------------------------------------------------
unsigned int
    out[OUT_COUNT]={0,0,0,0},
    zin[ZIN_COUNT]={0,0,0,0,0},			// (ПРД) дискретные входы, 0 - свободный
    out_Z[OUT_COUNT]={0}, // запоминание для отображения
	zin_Z[ZIN_COUNT]={0}, // запоминание для отображения
    aik[AIK_COUNT * 8],             // (ПРД) аналоговые входы
    aout[AOUT_COUNT * 4] = {8192},
    aoutKon[AOUT_COUNT * 4] = {8192},

//---------------------------------------------------------------------------
//--Уровни вакуума--//
//---------------------------------------------------------------------------
 	// текущий уровень вакуума (Д1,Д2,Д3,Д4,Д5)
	D_D1 = 0, D_D2 = 0, D_D3 = 0, D_D4 = 0, D_D5 = 0,D_D6 = 0,
    //UVAK_OTK_D1 = 60,       // прокачка камеры по баратрону
    //UVAK_OTK_D2 = 5938,     // прокачка камеры по СС-10 (1*10-3)
    //UVAK_OTK_D3 = 6787,     // прокачка камеры по конвектрону (5*10-2)
    //UATM = 8845,            // атмосфера по ПМТ (925)
    //UVAK_TMN_V = 7889,      // 8Па порог включения ВВ насоса (конвектрон)
    //UVAK_TMN_N = 8137,      // 25Па порог включения ВВ насоса (конвектрон)
    //UVAK_ATM = 9850,        // Уровень атмосферы по азоту при напуске (СС-10)
    
   //  DOPUSK_VENT=50,
  //  UVAK_ZTMN = 5477,       // 40Па по ррт200
  //  UATM_D1 = 8496,         // атмосфера по ррт200
  //  POROG_OST_TMN=4,
   // POROG_DAVL = 6799,      // 100Па порог превышения давления в камере (мрт200)
   // UVAK_KN=4199,              //5 Па ррт200
    UVAK_KAM = 6018,        // 5Па по мрт200
    UVAKN_TMN = 5800,       // 200Па по ррт200
    UVAKV_TMN = 4200,       // 5Па по ррт200
    UVAK_SHL = 6018,        // 5Па по мрт200
    UVAKV_SHL=6018,         // 5Па по мрт200
    UVAKN_SHL=6437,         // 25Па по мрт200
    UVAK_SHL_MO = 7217,     // 500Па по мрт200

    UVAK_KAM_MO=7217,       // 500Па по мрт200
    UVVAK_KAM=4341,            //0,008Па по мрт200
    UVAKN_ISP=6437,         // 25Па по мрт200
    UVAKV_ISP=6018,         // 5Па по мрт200
    UVAK_ISP_MO=7217,       // 500Па по мрт200
    UATM = 8597;         // атмосфера по мрт200
//---------------------------------------------------------------------------
//--Настроечные и управляющие массивы--//
//---------------------------------------------------------------------------
unsigned int nasmod[NASMOD_COUNT+1] = {0};

/////////////////////////////////////////////////////////////////////////////////////////////////
// массив рабочих параметров
int par[PAR_ROW][PAR_COUNT]      = {0};
int par_V[PAR_ROW][3]= {0};
// массив параметпров для управления манипуляторами
long par_t[PAR_TRANS] = {0};
//---------------------------------------------------------------------------
//--Контрольные времена воздействий--//
//---------------------------------------------------------------------------
// времена и счетчики даны в секундах, если нет обратных комментариев
unsigned int

	// текущее время для процессов
	//T_VHG			= 5,	// к.время выставления р/р ВЧГ
	//T_ZAD_DVS		= 25,  // (тик)(0.5сек.) задержка на вкл.кнопок
	T_PROC			= 0,	 // время технологического процесса
	T_KTMN_SHL_RAZGON	= 360, // к.время разгона ТМН
    T_KTMN_ISP_RAZGON   = 360, // к.время разгона ТМН
	T_VKL_BPN     	= 3,   // задержка на вкл/откл реле и пускат. в БПН и БПМ
	//T_KKAM_V	= 650, // 650 сек. контр. время ВВ откачки камеры
	T_VODA			= 5,   // сек. реакция на пропадание воды
	//T_STOP			= 25,  // (тик) время на стоп двигателей УС
	T_DVIJ			= 25,  // (тик) время на переключение направл. двигателей УС
	//T_KDVIJ_SU		= 3000,  // (20 мс тик) 60 сек контрольное время движения УС конденсатора
	//T_KSUT			= 30,  // (20мс тик.) 0,6 сек. задержка УС на переключение движения
	T_KKAM			= 900,
	T_KTMN			= 900,
    //T_KPER         = 3,
    //T_KPRST         = 5,
    //T_KPR           = 15,
	T_KSHL			= 230, // к.время фороткачки шлюза
	T_KNAP			= 120, // к.время напуска в шлюз
	T_NAPUSK		= 5,
    //T_SBROSHE       = 20,  // задержка на сброс HE
    T_KSHL_V        = 100, //??
    T_KKAM_MO       =100,  //??
    T_KTMN_KAM_RAZGON=900,  //??
    T_KVVAK_KAM         =100,  //??
    T_KISP_MO           =100,  //??
    T_KISP              =100,  //??
    T_KISP_V            =100,  //??
    T_KSHL_MO           =100,  //??
    //T_KSHL_MO       = 180,
    //T_K_KN          = 300,
    //T_K_KAM         =300,
    //T_OTK_KN        =5400,
    T_KUST_ELU = 5,			// время выстоя уставки ЭЛ
    T_TMN = 2,
    //T_AVAR_OTKL                 =50,   // (тик) 1 сек контрольное время аварийного отключения установки
	// контрольные счетчики времени



    CT_TEMP1 = 0,			// счетчик Нагрева 1
	CT_TEMP2 = 0,			// счетчик Нагрева 2
    CT_TMN = 0,
	CT_IST = 0,
    CT_VODA_NG = 0,
    CT_TOLSH = 0,			// ИТ
	CT_ELU = 0,				// ЭЛУ
    CT_RASPLAV=0,
	// счетчики времен
    CT_T1, 			        // 1мс
    CT_T20,     			// 20 мс

	// контрольные счетчики режимов, сек
	CT_1,
    CT_2,
    CT_3,
    CT_4,
    CT_5,
    CT_6,
    CT_7,
    CT_9,
    CT_25,
    CT_26,
    CT_27,
    CT27K1,
    CT_29,
    CT29K1,
    CT_36,
    CT36K1,
    CT_38;
//---------------------------------------------------------------------------
//--ОТВЕТЫ--//
unsigned char
	otvet;	  // диалоговый ответ оператора
	
//---------------------------------------------------------------------------
//--Шаги и контрольные параметры подпрограмм--//
//---------------------------------------------------------------------------
unsigned char
	sh_   = 0,         		// общая переменная передачи шага
	// (ПРД) локальная для режима переменная шага
	shr[SHR_COUNT+1],
	// локальная для режима переменная подшага
	sh[SHR_COUNT+1];
unsigned char
        zshr3;
unsigned char
		PR_TRTEST = 0,			// признак окончания транспортного теста


        KOM_TOLSH = 2,          // команда на толщинометр на опрос толщины
        PR_TOLSH = 0,           // признак полож. ответа от толщинометра
         ZAD_N_PL = 0,



		PR_NALADKA = 0,
        SOST_V=0,
        SOST_N=0,
        RAB_NIJN=0,
        PR_NAL_PD=0,



		N_ST_MAX = 101,
        
		N_ST = 0;
unsigned int
                N_ZIKL_PROM=0,
                N_ZIKL_PROM_KAM=0,
                N_ZIKL_PROM_ISP=0,

                N_ZIKL_PROM_SHL=0;
float IMP60=166.66667;
int PAR_OHL=0;
//int     h = 792; //79167; 
bool
        PR_KLASTER=1,
        pr_lib=0,

        PR_SBROS_RRG=0,
        PR_OST_TMN_ISP=0,
        PR_OST_TMN_SHL=0;

//------------------------------------------------------------------------------
//-- Электронный луч -  ELU
//-----------------------------------------------------------------------
unsigned char
	PR_ELU = 0,						// признак положительного ответа
	KOM_ELU = 0;					// команда опроса
unsigned int PAR_ELU  = 0;			// параметр ЭЛ
unsigned int ZPAR_ELU = 0;          // предыдущий параметр ЭЛ
	int X_ELU;						// текущее значение температуры
	unsigned char VRELU = 0;		// 1 - признак выхода на режим
	int E_ELU;						// текущая ошибка
	int UST_ELU;					// уставка ЭЛУ
	int DELELU;						// модуль текущей ошибки
	unsigned int LIM1ELU;			// предел ошибки регулирования (большой)
	unsigned int LIM2ELU;			// предел ошибки регулирования (малый)
	unsigned int T_VRELU=30;		// контрольное время выхода на режим (сек.)
	unsigned int T_KELU = 8;		// контрольное время определения ошибки(сек.)
	int DOPELU = 10;				// допустимая погрешность 10%
	unsigned int TEK_ELU;			// текущий ток
	unsigned int N_PROCESS_ELU;		// номер процесса
	unsigned int N_TIGEL;			// номер тигля
	unsigned int POCKET_SET;		//
	unsigned int EMISSION_RELEASE_INTERVAL;	//
	unsigned int REMP_ELU;	//

    bool pri_elu[6] = { 0,0,0,0,0,0 };  // признаки ответа на команды
//---------------------------------------------------------------------------
//--БПН (Включение нагрева)  индекс устройства TEMP (нагрев по Т)
//-----------------------------------------------------------------------
unsigned char
	KOM_TEMP = 2;		    	// команда опроса статуса ТЕРМОДАТА

bool
    PR_TEMP = 0;		    	// признак положительного ответа ТЕРМОДАТА

unsigned int
	ZAD_TEMP1 = 0,		    	// уставка задания по температуре ТЕРМОДАТА
	PAR_TEMP1  = 0,	    	        // параметр БПН
	ZPAR_TEMP1 = 0;		    	// зап. параметра температуры БПН1
	int X_TEMP1;                     // текущее значение температуры
	unsigned char VRTEMP1 = 0;       // 1 - признак выхода на режим БПН
	int E_TEMP1;		        // текущая ошибка
	int DELTEMP1;		    	// модуль текущей ошибки
	unsigned int LIM1TEMP1;	        // предел ошибки регулирования (большой)
	unsigned int LIM2TEMP1;	        // предел ошибки регулирования (малый)
	int DOPTEMP1 = 5;				// допустимая погрешность 20%
	unsigned int TEK_TEMP1;		// текущая температура по каналу 1 (в ПРД)

unsigned int
	ZAD_TEMP2 = 0,		    	// уставка задания по температуре ТЕРМОДАТА
	PAR_TEMP2  = 0,	    	        // параметр БПН
	ZPAR_TEMP2 = 0;		    	// зап. параметра температуры БПН1
	int X_TEMP2;                     // текущее значение температуры
	unsigned char VRTEMP2 = 0;       // 1 - признак выхода на режим БПН
	int E_TEMP2;		        // текущая ошибка
	int DELTEMP2;		    	// модуль текущей ошибки
	unsigned int LIM1TEMP2;	        // предел ошибки регулирования (большой)
	unsigned int LIM2TEMP2;	        // предел ошибки регулирования (малый)
	int DOPTEMP2 = 5;				// допустимая погрешность 20%
	unsigned int TEK_TEMP2;		// текущая температура по каналу 2 (в ПРД)
	
	unsigned int T_VRTEMP= 600;       // контрольное время выхода на режим (сек.)
	unsigned int T_KTEMP = 3;       // контрольное время определения ошибки(сек.)

unsigned int
    ZAD_TEMP3 = 0,
    ZAD_TEMP4 = 0,
    TEK_TEMP3,
    TEK_TEMP4,
//---------------------------------------------------------------------------
//--Связь между транспортом и модулем--//
//---------------------------------------------------------------------------
	OTVET_MOD,
	KOM_MOD;	
//------------------------------------------------------------------------------
//--Привод вращения п/д
//-----------------------------------------------------------------------
	unsigned char
	KOM_VR = 0,	// команда
	OTVET_VR = 0,	// ответ
	TYPE_VR = 0;	// тип движения

	bool
	PR_VR = 0,		// признак работы механизма
	HOME_VR = 0;	// признак движения в Home

	int
	PUT_VR = 0,	// заданный путь
	V_VR = 0,		// скорость
	TEK_ABS_VR = 0,// текущий абсолютный путь
	TEK_OTN_VR = 0;// текущий относительный путь

	unsigned int
	CT_VR = 0;		// (1 мсек) счетчик режимов механизма
//------------------------------------------------------------------------------
//--ПГП
//-----------------------------------------------------------------------
	unsigned char
	KOM_PER = 0,	// команда
	OTVET_PER = 0,	// ответ
	TYPE_PER = 0;	// тип движения

	bool
	PR_PER = 0,		// признак работы механизма
	HOME_PER = 0;	// признак движения в Home

	int
	PUT_PER = 0,	// заданный путь
	V_PER = 0,		// скорость
	TEK_ABS_PER = 0,// текущий абсолютный путь
	TEK_OTN_PER = 0;// текущий относительный путь

	unsigned int
	CT_PER = 0;		// (1 мсек) счетчик режимов механизма
//------------------------------------------------------------------------------
//--ПВП
//-----------------------------------------------------------------------
	unsigned char
	KOM_POD = 0,	// команда
	OTVET_POD = 0,	// ответ
	TYPE_POD = 0;	// тип движения

	bool
	PR_POD = 0,		// признак работы механизма
	HOME_POD = 0;	// признак движения в Home

	int
	PUT_POD = 0,	// заданный путь
	V_POD = 0,		// скорость
	TEK_ABS_POD = 0,// текущий абсолютный путь
	TEK_OTN_POD = 0;// текущий относительный путь

	unsigned int
	CT_POD = 0;		// (1 мсек) счетчик режимов механизма
//------------------------------------------------------------------------------
//--Привод кассеты
//-----------------------------------------------------------------------
	unsigned char
	KOM_KAS = 0,	// команда
	OTVET_KAS = 0,	// ответ
	TYPE_KAS = 0;	// тип движения

	bool
	PR_KAS = 0,		// признак работы механизма
	HOME_KAS = 0;	// признак движения в Home

	int
	PUT_KAS = 0,	// заданный путь
	V_KAS = 0,		// скорость
	TEK_ABS_KAS = 0,// текущий абсолютный путь
	TEK_OTN_KAS = 0;// текущий относительный путь

	unsigned int
	CT_KAS = 0;		// (1 мсек) счетчик режимов механизма
//------------------------------------------------------------------------------
//--Привод поворота датчиков
//-----------------------------------------------------------------------
	unsigned char
	KOM_PPD = 0,	// команда
	OTVET_PPD = 0,	// ответ
	TYPE_PPD = 0;	// тип движения

	bool
	PR_PPD = 0,		// признак работы механизма
	HOME_PPD = 0;	// признак движения в Home

	int
	PUT_PPD = 0,	// заданный путь
	V_PPD = 0,		// скорость
	TEK_ABS_PPD = 0,// текущий абсолютный путь
	TEK_OTN_PPD = 0;// текущий относительный путь

	unsigned int
	CT_PPD = 0;		// (1 мсек) счетчик режимов механизма
    unsigned int PR_PPD_D =0;
//------------------------------------------------------------------------------
//----------------Прототипы---------------------------------------------------
//------------------------------------------------------------------------------
void R_1();                  // режима 1 "Откачка камеры"
void R_2();                  // режима 2 "Откачка шлюза"
void R_3();                  // режима 3 "Рабочий цикл"
void R_4();                  // режима 4 "Технологический процесс"
void R_5();                  // режима 5 "Сброс РЦ"
void R_6();                  // режима 6 "Сбор пластин"
void R_7();                  // режима 7 "Отключение установки"
void R_8();                  // режима 8 "Аварийное отключение установки"
void R_9();                  // режима 9 "Транспортный тест"
void R_10();                 // режима 10 "Открыть ЩЗ"
void R_11();                 // режима 11 "Закрыть ЩЗ"
void R_12();                 // режима 12 "Ман. перем. в исх"
void R_13();                 // режима 13 "Ман. перем. вперед/назад"
void R_14();                 // режима 14 "Ман. пов. в исх"
void R_15();                 // режима 15 "Ман. пов. влево/вправо"
void R_16();
void R_17();                 // режима 18 "Дросселирование ДЗ"
void R_18();                 // режима 18 "Открыть ДЗ"
void R_19();                 // режима 19 "Закрыть ДЗ"
void R_20();                 // режима 20 "РРГ1"
void R_21();                 // режима 21 "РРГ2"
void R_22();                 // режима 22 "РРГ3"
void R_23();                 // режима 23 "РРГ4"
void R_24();                 // режима 24 "РРГ5"
void R_25();
void R_26();
void R_27();
void R_28();
void R_29();                 // режима 29 "Вкл. ВЧГ ИП"


void R_30();                 // режима 30 "Автосогл. ВЧГ ИП(точно)"
void R_31();                 // режима 31 "Движ. в точку ВЧГ ИП(грубо)"
void R_32();                 // режима 32 "Движ. в точку ВЧГ ИП(точно)"

void R_36();
void R_37();                 // режима 37 "Прижим вверх"
void R_38();                 // режима 38 "Прижим вниз"
void R_43();                 // режима 43 "Подключение камеры слежения за расплавом"
//---------------------------------------------------------------------------
//--ФУНКЦИИ КОЛЬЦА--//
//---------------------------------------------------------------------------
void KOLCO();   		// подпрограмма кольцо (диагн., реакция на аварии)

void OSBROS();			// общий сброс
void TIME ();			// таймеры
void POST ();   		// приём и дешифрация команд

void DIAGN_KOLCO();             // диагностика в кольце
void AVAR_VODA_STOL();	        // реакция на пропадание воды в п/держ
void AVAR_VODA_IP();	        // реакция на пропадание воды в ИП
void AVAR_DAVL();	            // "Реакция на высокое давление в камере при работе ТМН"
void UPR_AVAR_OTKL();		    // управление аварийным отключением
void VID_DIAGN_GIS();           // выдача диагностики нет согласования ВЧГ п/д
void ZashDD();                  // подпрограмма защиты датчика

void MEH_AVAR_CHK();	        // слежение за авриями механизмов
void MEH_AVAR_SBROS();

void AVAR_VODA_NG (); //Реакция на попадание воды в корпус нагревателя п/д
void AVAR_VODA_ISP(); // Реакция на попадание воды в испаритель ЭЛ
void AVAR_DAVL();      // "Реакция на высокое давление в камере при работе ТМН"

void OPR_ZAGR_KAS();//подпрограмма "определения загруженных п/д в кассету"
void SLEJ_PGP ();//подпрограмма "Слежение за наличием п/д на ПГП во время движения"
//---------------------------------------------------------------------------
//--ФУНКЦИИ УСТРОЙСТВ--//
//---------------------------------------------------------------------------



void VIBPAR_TEMP1();
void RLIMTEMP1();
void PDTEMP1();



void VIBPAR_TEMP2();
void RLIMTEMP2();
void PDTEMP2();
void VIBPAR_NAGR ();		    // подпрограмма "выбор параметров нагрева"



void OBPN();			// отключить пускатель БПН



 void VklTmnKam ();               //Включение ТМН кам
void PDELU();
void RLIMELU();
void VIBPAR_ELU();

void VUEL();			// подпрограмма "Включить U электронного луча"
void OUEL();			// подпрограмма "Отключить U электронного луча"
void ResetTh ();
//---------------------------------------------------------------------------
//--RS-функции--//
//---------------------------------------------------------------------------

void VIDK_TEMP1(int,int,int,int);
void VIDK_TEMP2(int,int,int,int);

void VIDK_ELU ( int , int , int , int , int );  // ЭЛУ
void VIDK_TOLSH ( int , int , int );		// ИТ

void VR_HOME(unsigned int a);
void VR_NEXT(unsigned int a,unsigned int b);
void VIDK_VR(bool prRS,unsigned char a,int b,int c,unsigned int d, unsigned int e);

void PER_HOME(unsigned int a);
void VIDK_PER(bool prRS,unsigned char a,int b,int c,unsigned int d, unsigned int e);

void POD_HOME(unsigned int a);
void VIDK_POD(bool prRS,unsigned char a,int b,int c,unsigned int d, unsigned int e);

void KAS_HOME(unsigned int a);
void VIDK_KAS(bool prRS,unsigned char a,int b,int c,unsigned int d, unsigned int e);

void PPD_HOME(unsigned int a);
void VIDK_PPD(bool prRS,unsigned char a,int b,int c,unsigned int d, unsigned int e);


//---------------------------------------------------------------------------
//--Транспортные функции--//
//---------------------------------------------------------------------------
void SBROS_MEH();       	// сброс механики

extern
    void A_OUT(unsigned int Nmb, unsigned int Value);   // задание аналогового выхода
extern
    void SetOut(bool, unsigned char, unsigned int);     // управление дискретным сигналом

#endif
//---------------------------------------------------------------------------
//--ќписание переменных, структур и прототипов шаблонных функций--//
//---------------------------------------------------------------------------
// структура типа "точка" дл€ выделени€ дискретных сигналов, диагностик
// например диагностика: (1, 0x02) - первый байт, второй бит
struct SZaslPoint
{
    char
        x;
    int
        y;
};
// структура объектов, управл€емых дискретными сигналами с дискретной обратной
// св€зью: клапана, пневматика, механизмы подъЄма и т.д.
struct SZasl
{
    char
        // тип объекта в зависимости от кол-ва управл€ющих сигналов и сигналов
        // обратной св€зи, может быть: 11, 12, 21, 22
        // например: 21 - 2 управл€ющих сигнала, 1 ответный сигнал
        type;
    unsigned int
        // норма
        // 0 - код нормы включени€ объекта
        // 1 - код нормы отключени€ объекта
        normaNmb[2],
        // счетчик объекта
        ctObject,
        // массив контрольных времЄн выполнени€ активных действий объекта
        // 0 - контрольное врем€ включени€ объекта
        // 1 - контрольное врем€ отключени€ объекта
        // 2 - контрольное врем€ задержки объекта после включени€
        // 3 - контрольное врем€ задержки объекта после отключени€
        tkAction[4];
    SZaslPoint
        // массив диагностик объекта
        // 0 - объект не отреагировал на сигнал "включени€"
        // 1 - объект не отреагировал на сигнал "отключени€"
        // 2 - положение объекта неопределено
        // 3 - положение объекта необнозначно
        diagnObject[4],
        // массив управл€ющих сигналов объекта
        // 0 - сигнал об открытии
        // 1 - сигнал о закрытии
        zinIn[2],
        // массив обратной дискретной св€зи объекта
        // 0 - сигнал на открытие
        // 1 - сигнал на закрытие
        zinOut[2];
    // функци€ инкрементации счетчика
    void Time();
};

//#define KLAPAN_COUNT 11
SZasl
	
    II,
    M1,
    M2;
	
    //*KlObjects[KLAPAN_COUNT];

// функци€ управлени€ объектом с дискетными входами-выходами
void DoAction(bool action, SZasl *object);

// функци€ управлени€ объектом с 2 дискетными выходами и 1 входом
void DoAction21(bool action, SZasl *object);

// функци€ управлени€ счетчиками
void TimeZasl();


extern
    unsigned char
        // норма
        norma,
        // вспомогательный подшаг
        sh_,
        // диагностики
        diagn[];


extern
    unsigned int
        // дискретные входы
        zin[],
        // дискретные выходы
        out[];

extern
    void A_OUT(unsigned int channelNmb, unsigned int value);
    void SetOut (bool value, unsigned char byteNmb, unsigned int mask);


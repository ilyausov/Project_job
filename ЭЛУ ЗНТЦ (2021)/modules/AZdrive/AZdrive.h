#ifndef AZdriveH
#define AZdriveH
//---------------------------------------------------------------------------
//--Переменные необходимые для обмена по RS-485--//
//---------------------------------------------------------------------------
#include <vcl.h>
//---------------------------------------------------------------------------
// типы движений (соответствует типам в контроллере стр.61)
#define ABS 1	// движение в абсолютную позицию
#define OTN 2	// движение на относительный путь
#define CON 7	// "бесконечное" движение на зад. скорости
#define ABS_F 10	// движение в прямом напр. (для циклич.)
#define ABS_R 11	// движение в обратном напр. (для циклич.)

extern TForm1 *Form1;
		
	// Acom : 	0 - чтение регистров ( текущее положение )
	//			1 - запись регистров ( тип, положение, скорость, ускорение, торможение, current, delay, link, next data )
	//			2 - чтение регистров ( тип, положение, скорость.. )
	//			3 - запись регистров ( ускорение, торможение ) - н/и
	//			4 - чтение регистров ( ускорение, торможение ) - н/и
	//			5 - запись регистров ( ZHOME - скорость, ускорение, торможение )
	//			6 - чтение регистров ( ZHOME - скорость, ускорение, торможение )
	//			7 - старт М0 - н/и
	//			8 - стоп М0 - н/и
	//			9 - запись регистров ( link, next data ) - н/и
	//			10 - чтение регистров ( link, next data ) - н/и
/*	
unsigned char AZ_Req_Buf_1[8] =
{     //0   1    2    3    4    5    6    7    8    9   10    11   12   13   14   15   16   17   18
      0xAA,0x03,0x00,0xC6,0x00,0x02,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	// 0
      0xAA,0x10,0x18,0x00,0x00,0x12,0x24,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,	// 1
      0xAA,0x03,0x18,0x00,0x00,0x12,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	// 2
      0xAA,0x10,0x18,0x06,0x00,0x04,0x08,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0xCC,0xCC,0x00,0x00,	// 3
      0xAA,0x03,0x18,0x06,0x00,0x04,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	// 4
      0xAA,0x10,0x02,0xb0,0x00,0x06,0x0C,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,	// 5
      0xAA,0x03,0x02,0xb0,0x00,0x06,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	// 6
      0xAA,0x10,0x00,0x7c,0x00,0x02,0x04,0x00,0x00,0x00,0x08,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,	// 7
      0xAA,0x10,0x00,0x7c,0x00,0x02,0x04,0x00,0x00,0x00,0x00,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,	// 8
      0xAA,0x10,0x18,0x0D,0x00,0x04,0x08,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0xCC,0xCC,0x00,0x00,	// 9
      0xAA,0x03,0x18,0x0D,0x00,0x04,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00	// 10
};
*/
unsigned char AZ_Req_Buf_0[6] =
{0xAA,0x03,0x00,0xC6,0x00,0x02};
	
unsigned char AZ_Req_Buf_1[43] =
{0xAA,0x10,0x18,0x00,0x00,0x12,0x24,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01};
//0    1	2	 3	  4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42      
unsigned char AZ_Req_Buf_2[6] =
{0xAA,0x03,0x18,0x00,0x00,0x12};

unsigned char AZ_Req_Buf_5[19] =
{0xAA,0x10,0x02,0xb0,0x00,0x06,0x0C,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01};
	
unsigned char AZ_Req_Buf_6[6] =
{0xAA,0x03,0x02,0xb0,0x00,0x06};

	// ответы
	//0	   1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16
	//0xAA 0x03 0x04 0xdd 0xdd 0xdd 0xdd 0xCC 0xCC
	//0xAA 0x10 0x18 0x00 0x00 0x06 0xCC 0xCC
	//0xAA 0x03 0x0С 0xdd 0xdd 0xdd 0xdd 0xDD 0xDD 0xDD 0xDD 0xdd 0xdd 0xdd 0xdd 0xCC 0xCC
	
// адреса data:
//	 0 - 0x1800
//	 1 - 0x1840
//	 2 - 0x1880
//	   ..
//	255 - 0x57C0
	
struct DATA_MECH	// структура
{
	int set_mech[5]; // настройки механизмов
	// 0 - ускорение
	// 1 - торможение
	// 2 - скорость ZHome
	// 3 - ускор./торм. ZHome
	// 4 - нач.скорость ZHome
	int v_mech[3];	// скорости
	// 0 - бол, 1 - малая, 2 - полз.	
};
	
struct SAZ_drive
{
	unsigned char adr;		// адрес устойства
	String name;            // название для отображения

	unsigned char
		Err,				// кол-во ошибок
		Max_err,			// максимум ошибок
		ACom,				// текущий автоматический запрос
		ANum,				// номер отрабатываемого задания
		Buf_len,			// длина запроса
		diagn_byte,        	// номер байта рабочих диагностик
		diagnS_byte,        // номер байта связной диагностики
		diagnS_mask;        // маска байта связной диагностики
		
	unsigned int
		wrap_len;			// кол-во имп. на оборот для циклич.
			
	unsigned char			// переменные VIDK
		*Kom_AZ,			// команда
		*Otv_AZ,			// ответ
		*Type_AZ;			// тип операции 1-абс, 2-отн

	int
        *V_AZ,				// скорость
		*Put_AZ;			// путь движения

	bool
		*Home_AZ,			// признак движения в Home
		*Pr_AZ;				// признак связи
			
	bool
		Data_errZH,			// признак соответствия данных ZHome
		Data_err[256];	// признак соответствия данных
		// тип, путь, скорость
		// ускорение, торможение
		// link, next data
	
	int Rem_pos,			// предыдущее значение пути (для вывода)
		Del_pos,			// разница путей (для вывода)
        *Abs_pos,			// относительный путь (для вывода)
		*Otn_pos;			// относительный путь (для вывода)
	
	/*
	unsigned char
		Zad_type;			// тип операции 1-абс, 2-отн (из контроллера)		
		
	int Zad_pos,			// задание положения (из контроллера)
		Zad_spd,			// задание скорости (из контроллера)
		Tek_pos,			// текущее положение (из контроллера)
		Tek_acc,			// текущее ускорение (из контроллера)
		Tek_dec,			// текущее торможение (из контроллера)
		Tek_ZHspd,			// текущая скорость ZHome (из контроллера)
		Tek_ZHacc,			// текущее ускорение ZHome (из контроллера)
		Tek_ZHnsp,			// текущее нач.скорость ZHome (из контроллера)
		Rem_acc,			// текущее ускорение (запомненое)
		Rem_dec,			// текущее торможение (запомненое)
		Rem_ZHspd,			// текущее скорость ZHome (запомненое)
		Rem_ZHacc,			// текущее ускорение ZHome (запомненое)
		Rem_ZHnsp,			// текущее нач.скорость ZHome (запомненое)
		Rem_spdB,			// скорость большая (запомненое)
		Rem_spdM,			// скорость малая (запомненое)
		Rem_spdP;			// скорость ползущая (запомненое) */
		
	int Zad_Op_data[256][9],
        Tek_Op_data[256][9];

    unsigned char
        Max_Op_Data;        // количество строк для записи

	SComport *SPort;		// указатель на порт устройства
		
	// элементы ручной страницы
	TTabSheet
		*TS_Pan;            // вкладка для элемента
		
	TPanel
		*Pnl_Parent;
		
	TLabel
		*Lbl_Uni;
		
	TRadioButton			// элементы вывода приема/передачи
		*RB_prd,
		*RB_prm;
		
	TGroupBox
		*GB_Main,
		*GB_Spd;
			
	TEdit					//Элементы вы
		*Edt_Zad_type,		// задание типа движения (из контроллера)
		*Edt_Zad_pos,		// задание положения (из контроллера)
		*Edt_Zad_spd,		// задание скорости (из контроллера)
		*Edt_Tek_pos,		// текущее положение (из контроллера)
		
		*Edt_Tek_acc,		// текущее ускорение (из контроллера)
		*Edt_Tek_dec,		// текущее торможение (из контроллера)
		*Edt_Tek_ZHspd,		// текущая скорость ZHome (из контроллера)
		*Edt_Tek_ZHacc,		// текущее ускорение ZHome (из контроллера)
		*Edt_Tek_ZHnsp,		// текущее нач.скорость ZHome (из контроллера)
		
		*Edt_Rem_acc,		// текущее ускорение (запомненое)
		*Edt_Rem_dec,		// текущее торможение (запомненое)
		*Edt_Rem_ZHspd,		// текущее скорость ZHome (запомненое)
		*Edt_Rem_ZHacc,		// текущее ускорение ZHome (запомненое)	
		*Edt_Rem_ZHnsp,		// текущее нач.скорость ZHome (запомненое)
		
		*Edt_Vvod_acc,		// текущее ускорение (ввод)
		*Edt_Vvod_dec,		// текущее торможение (ввод)
		*Edt_Vvod_ZHspd,	// текущее скорость ZHome (ввод)
		*Edt_Vvod_ZHacc,	// текущее ускорение ZHome (ввод)
		*Edt_Vvod_ZHnsp,	// текущее нач.скорость ZHome (ввод)
		
		*Edt_Rem_spdB,		// скорость большая (запомненое)
		*Edt_Rem_spdM,		// скорость малая (запомненое)
		*Edt_Rem_spdP,		// скорость ползущая (запомненое)
		
		*Edt_Vvod_spdB,		// скорость большая (ввод)
		*Edt_Vvod_spdM,		// скорость малая (ввод)
		*Edt_Vvod_spdP;		// скорость ползущая (ввод)
		
	TButton
		*Btn_Vvod_Par,		// кнопка записи настроек
		*Btn_Vvod_Spd;		// кнопка записи скоростей
		
	TStringGrid
		*Data_Table;

	DATA_MECH data_mech;

	// Сохранение настроек драйверов
	char *loc_data_mech; // путь файла 

	//void VIDK(unsigned char,int,unsigned char,bool,unsigned int); // выдача команд
	void AZdrive_Gen(); 								// создание страницы
	unsigned char AZ_manage( unsigned int );		// функция связи с Драйвером
    void AZ_ZapQuery();                             // определение задачи
	void AZ_FrmZap(unsigned char);					// формирование запроса
	void AZ_ChkRep(unsigned char);								// обработка ответа
	unsigned int AZ_getKS( unsigned char*,int );		// расчет контрольной суммы
	void __fastcall ChkVVdata(TObject *Sender); 		// контроль вводимых параметров
	void __fastcall SetPar(TObject *Sender); 			// ввод настроек
	void __fastcall SetSpd(TObject *Sender); 			// ввод скоростей
};

    void Visual_AZdata(); // обновить таблицу значений
	void Visual_AZdrive(); // обновить контрольные значения настроечного массива
	void AZdrive_Save(); // сохранение данных	
	void AZdrive_Load(); // загрузка данных
    //void AZdrive_Time(); // инкремент счетчиков

#define DRIVE_COUNT 5
SAZ_drive *AZ_drive[DRIVE_COUNT];
//------------------------------------------------------------------------------
#endif



	
	
	
	

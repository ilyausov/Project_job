//---------------------------------------------------------------------------
//--Переменные необходимые для обмена по RS-485--//
//---------------------------------------------------------------------------
#include <vcl.h>
//---------------------------------------------------------------------------
extern TForm1 *Form1;
		
	// Acom : 	0 - чтение регистров ( текущее положение )
	//			1 - запись регистров ( тип, положение, скорость )
	//			2 - чтение регистров ( тип, положение, скорость )
	//			3 - запись регистров ( ускорение, торможение )
	//			4 - чтение регистров ( ускорение, торможение )
	//			5 - запись регистров ( ZHOME - скорость, ускорение, торможение )
	//			6 - чтение регистров ( ZHOME - скорость, ускорение, торможение )
	//			7 - старт М0
	//			8 - стоп М0
	
unsigned char AZ_Req_Buf[9][19] =
{     //0   1    2    3    4    5    6    7    8    9   10    11   12   13   14   15   16   17   18
      0xAA,0x03,0x00,0xC6,0x00,0x02,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	// 0
      0xAA,0x10,0x18,0x00,0x00,0x06,0x0C,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,	// 1
      0xAA,0x03,0x18,0x00,0x00,0x06,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	// 2
      0xAA,0x10,0x18,0x06,0x00,0x04,0x08,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0xCC,0xCC,0x00,0x00,	// 3
      0xAA,0x03,0x18,0x06,0x00,0x04,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	// 4
      0xAA,0x10,0x02,0xb0,0x00,0x06,0x0C,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,	// 5
      0xAA,0x03,0x02,0xb0,0x00,0x06,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,	// 6
      0xAA,0x10,0x00,0x7c,0x00,0x02,0x04,0x00,0x00,0x00,0x08,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00,	// 7
      0xAA,0x10,0x00,0x7c,0x00,0x02,0x04,0x00,0x00,0x00,0x00,0xCC,0xCC,0x00,0x00,0x00,0x00,0x00,0x00	// 8		  
};

	// ответы
	//0	   1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16
	//0xAA 0x03 0x04 0xdd 0xdd 0xdd 0xdd 0xCC 0xCC
	//0xAA 0x10 0x18 0x00 0x00 0x06 0xCC 0xCC
	//0xAA 0x03 0x0С 0xdd 0xdd 0xdd 0xdd 0xDD 0xDD 0xDD 0xDD 0xdd 0xdd 0xdd 0xdd 0xCC 0xCC
	
struct SAZ_drive
{
	unsigned char adr;		// адрес устойства
	String name;            // название для отображения

	unsigned char
		Err,				// кол-во ошибок
		Max_err,			// максимум ошибок
		ACom,				// текущий автоматический запрос
		Buf_len,			// длина запроса
	//	diagn_byte,        	// номер байта рабочих диагностик
		diagnS_byte,        // номер байта связной диагностики
		diagnS_mask;        // маска байта связной диагностики
	//unsigned int
	//	*CT_AZ;				// счетчик механизма
	//unsigned char
	//	home_norm,
	//	norm,
	//	Stop_byte,			// бит Стоп мех (общий)
	//	Stop_mask,
	//	Rdy_byte,			// бит готовности
	//	Rdy_mask,
	//	Run_byte,			// бит движения
	//	Run_mask,
	//	HomeOut_byte,		// бит движения в Home
	//	HomeOut_mask,
	//	HomeIn_byte,		// бит нахождения в Home
	//	HomeIn_mask;
			
	unsigned char			// переменные VIDK
		*Kom_AZ,			// команда
		*Otv_AZ,			// ответ       
		*Type_AZ,			// тип операции 1-абс, 2-отн
		*V_AZ;				// выбор скорости (б/м/п)

	int				
        Spd_AZ,				// скорость
		*Put_AZ;			// путь движения

	bool
		*Home_AZ,			// признак движения в Home
		*Pr_AZ;				// признак связи
			
	bool
		Data_err1,			// признак соответствия данных
		Data_err2;			// признак соответствия данных
		
	int Rem_pos,			// предыдущее значение пути (для вывода)
		Del_pos,			// разница путей (для вывода)
        *Abs_pos,			// относительный путь (для вывода)
		*Otn_pos;			// относительный путь (для вывода)
		
	unsigned char
		Zad_type;			// тип операции 1-абс, 2-отн (из контроллера)		
		
	int Zad_pos,			// задание положения (из контроллера)
		Zad_spd,			// задание скорости (из контроллера)
		Tek_pos,			// текущее положение (из контроллера)
		Tek_acc,			// текущее ускорение (из контроллера)
		Tek_dec,			// текущее торможение (из контроллера)
		Tek_ZHspd,			// текущая скорость ZHome (из контроллера)
		Tek_ZHacc,			// текущее ускорение ZHome (из контроллера)
		Tek_ZHnsp,			// текущее нач.скорость ZHome (из контроллера)
		Rem_acc,			// текущее ускорение (запомненое)
		Rem_dec,			// текущее торможение (запомненое)
		Rem_ZHspd,			// текущее скорость ZHome (запомненое)
		Rem_ZHacc,			// текущее ускорение ZHome (запомненое)
		Rem_ZHnsp,			// текущее нач.скорость ZHome (запомненое)
		Rem_spdB,			// скорость большая (запомненое)
		Rem_spdM,			// скорость малая (запомненое)
		Rem_spdP;			// скорость ползущая (запомненое)

	SComport *SPort;		// указатель на порт устройства
		
	// элементы ручной страницы
	TTabSheet
		*TS_Pan;            // вкладка для элемента
		
	TPanel
		*Pnl_Parent;
		
	TLabel
		*Lbl_Uni;
		
	TRadioButton			// элементы вывода приема/передачи
		*RB_prd,
		*RB_prm;
		
	TGroupBox
		*GB_Main,
		*GB_Spd;
			
	TEdit					//Элементы вы
		*Edt_Zad_type,		// задание типа движения (из контроллера)
		*Edt_Zad_pos,		// задание положения (из контроллера)
		*Edt_Zad_spd,		// задание скорости (из контроллера)
		*Edt_Tek_pos,		// текущее положение (из контроллера)
		
		*Edt_Tek_acc,		// текущее ускорение (из контроллера)
		*Edt_Tek_dec,		// текущее торможение (из контроллера)
		*Edt_Tek_ZHspd,		// текущая скорость ZHome (из контроллера)
		*Edt_Tek_ZHacc,		// текущее ускорение ZHome (из контроллера)
		*Edt_Tek_ZHnsp,		// текущее нач.скорость ZHome (из контроллера)
		
		*Edt_Rem_acc,		// текущее ускорение (запомненое)
		*Edt_Rem_dec,		// текущее торможение (запомненое)
		*Edt_Rem_ZHspd,		// текущее скорость ZHome (запомненое)
		*Edt_Rem_ZHacc,		// текущее ускорение ZHome (запомненое)	
		*Edt_Rem_ZHnsp,		// текущее нач.скорость ZHome (запомненое)
		
		*Edt_Vvod_acc,		// текущее ускорение (ввод)
		*Edt_Vvod_dec,		// текущее торможение (ввод)
		*Edt_Vvod_ZHspd,	// текущее скорость ZHome (ввод)
		*Edt_Vvod_ZHacc,	// текущее ускорение ZHome (ввод)
		*Edt_Vvod_ZHnsp,	// текущее нач.скорость ZHome (ввод)
		
		*Edt_Rem_spdB,		// скорость большая (запомненое)
		*Edt_Rem_spdM,		// скорость малая (запомненое)
		*Edt_Rem_spdP,		// скорость ползущая (запомненое)
		
		*Edt_Vvod_spdB,		// скорость большая (ввод)
		*Edt_Vvod_spdM,		// скорость малая (ввод)
		*Edt_Vvod_spdP;		// скорость ползущая (ввод)
		
	TButton
		*Btn_Vvod_Par,		// кнопка записи настроек
		*Btn_Vvod_Spd;		// кнопка записи скоростей

	//void VIDK(unsigned char,int,unsigned char,bool,unsigned int); // выдача команд
	void AZdrive_Gen(); 								// создание страницы
	unsigned char AZ_manage( unsigned int );		// функция связи с Драйвером
	void AZ_FrmZap( );								// формирование запроса
	void AZ_ChkRep( );								// обработка ответа
	unsigned int AZ_getKS( unsigned char*,int );		// расчет контрольной суммы
	void __fastcall ChkVVdata(TObject *Sender); 		// контроль вводимых параметров
	void __fastcall SetPar(TObject *Sender); 			// ввод настроек
	void __fastcall SetSpd(TObject *Sender); 			// ввод скоростей
};

	void Visual_AZdrive(); // обновить контрольные значения настроечного массива
	void AZdrive_Save(); // сохранение данных	
	void AZdrive_Load(); // загрузка данных
    // void AZdrive_Time(); // инкремент счетчиков

#define DRIVE_COUNT 1
	
SAZ_drive *AZ_drive[DRIVE_COUNT];

//------------------------------------------------------------------------------
// Сохранение настроек драйверов
char *loc_data1_udb = "Data\\data1.udb"; // путь 1 файла 

struct DATA_FILE1	// структура
{
    int data_par[DRIVE_COUNT][5];
    int data_spd[DRIVE_COUNT][3];
};

DATA_FILE1 data_1;
//------------------------------------------------------------------------------


	
	
	
	

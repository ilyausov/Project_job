#ifndef LogicH
#define LogicH
//---------------------------------------------------------------------------
//--ДЕКЛАРИРОВАНИЕ ПЕРЕМЕННЫХ--//
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//--Норма и диагностики--//
//---------------------------------------------------------------------------
#define DIAGN_COUNT 22
#define DIAGN_S_COUNT 2
#define ZIN_COUNT 3
#define OUT_COUNT 3
#define AIK_COUNT 2
#define AOUT_COUNT 3 
#define SHR_COUNT 53

unsigned char
	norma = 0,		// (ПРД) норма
	qkk = 0,		// (ПРM) код команды
	diagn[DIAGN_COUNT],     // (ПРД) диагностики общие, обнуление перед main
	diagnOld[DIAGN_COUNT],  // диагностики архивные
	diagnS[DIAGN_S_COUNT],  // (ПРД) диагностики связей с устройствами по RS
	diagnSOld[DIAGN_S_COUNT];// диагностики связей с устройствами архивные
// счетчик кол-ва успешных сеансов связи с СС-10
unsigned int
    SS10ConnectCount = 0,
    UGOL = 0;
//---------------------------------------------------------------------------
//--Дискретные входы-выходы--//
//---------------------------------------------------------------------------
unsigned int
	zin[ZIN_COUNT] = {0},
	out[OUT_COUNT] = {0},
    zin_Z[ZIN_COUNT]={0}, // запоминание для отображения
    out_Z[OUT_COUNT]={0}, // запоминание для отображения	
    aik[AIK_COUNT * 8] = {0},
    aout[AOUT_COUNT * 4] = {8192},
    aoutKon[AOUT_COUNT * 4] = {8192},
//---------------------------------------------------------------------------
//--Уровни вакуума--//
//---------------------------------------------------------------------------
	// текущий уровень вакуума (Д1,Д2)
	D_D1 = 0, D_D2 = 0,
    UVAK_KN = 4199,        // 5 Па порог форвакуума в КН (MTP4)
    UVAK_KAM_V = 6020,         // 5 Па откачка в камере (MTM9)
    UVAK_KAM_N = 6305,         // 15 Па в камере (MTM9)
	UVAK_KAM = 6020,        // 5 Па откачка камеры (MTM9)
	UVAK_ATM = 8592,	// 9.7E4 па Уровень атмосферы (MTM9)
    POROG_DAVL = 6800;	// 100 Па порог превышения давления в камере (MTM9)
//---------------------------------------------------------------------------
//--Настроечные и управляющие массивы--//
//---------------------------------------------------------------------------
#define NASMOD_COUNT 40
unsigned int	nasmod[NASMOD_COUNT];
// Массив параметров
#define PAR_COUNT 20
unsigned int par[18][PAR_COUNT];
#define PAR_TRANS     1
long par_t[PAR_TRANS]            = {0};
//---------------------------------------------------------------------------
//--Контрольные времена воздействий--//
//---------------------------------------------------------------------------
// времена и счетчики даны в секундах, если нет обратных комментариев
unsigned int
	// текущее время для процессов
	
	T_VODA = 5,			// сек. реакция на пропадание воды
	T_KTMN_OTK = 420,		// сек. к.время фороткачки ТМН
	T_KKAM_V = 360,			// сек. контр. время ВВ откачки камеры
	T_KKAM = 550,			// сек. контр. время фороткачки камеры
	T_PROC = 0,			// время технологического процесса
	T_KUSTBM = 5,			// время выдачи уставки БПМ
	T_KZASL = 5,			// время прихода д.заслонки в заданное положение
	T_VKL_BPN = 3,			// задержка на вкл/откл реле и пускат. в БПН и БПМ
	T_KL = 3,			// к. время вкл/выкл клапанов
	TK_TMN1 = 5,			// время срабатывания старта ТМН
	TK_TMN2 = 5, 			// время перехода к ускорению
	TK_TMN3	= 2400,			// время разгона/торможения ТМН
	T_KKR = 30,			// время подъема/спуска крышки
        T_KSOPR = 15,                   // время контроля сопротивления (тик)
        T_KVRASH = 15,                  // контр. время отсутствия вращения барабана
        T_KOST = 30,                    // контр. время остывания
        T_KKN_OTK = 60,                 // секунды
        T_ZASL = 10,                    // время прихода д.заслонки в заданное положение
        T_KRAZGON = 600,                // время разгона КН
        T_VHG = 5,	       // к.время выставления р/р ВЧГ
	    tk48 = 5,           // (сек) временная задержка между шагами транспортного теста
        tk49 = 5,           // (сек) временная задержка между шагами транспортного теста
        tkVrashPderj = 10000,// (мсек) контрольное время вращения п/держателя	

	// счетчики времени отсутствия воды в технол. уст-вах.

	CT_VODA_BM = 0,			// отстутствия воды в магнетронах
	CT_VODA_II = 0,			// отстутствия воды в нагреве и ИИ
    CT_VODA_KN = 0,         // отсутствие воды в КН
	CT_TEMP = 0,			// счетчик времени режимов БПН
	CT_BM = 0,			// счетчик времени режимов БПМ
	CT_II = 0,			// счетчик времени режимов БПИИ
    CT_IST = 0,                     // сч-к вкл/выкл. источников
	CT_TMN = 0,			// счетчик времени режимов ТМН
	CT_KR = 0,			// (тик) счетчик режимов крышки
	CT_KR_T = 0,			// (сек) счетчик режимов крышки
    CT_BAR = 0,                     // счетчик вращения барабана
    CT_NAP = 0,
    CT_KSOPR = 0,                   // (тик) счетчик контроля сопротивления
    CT_VRASH_BAR = 0,
    CT_VKL_KN = 0,                  // КН
    CT_KN = 0,                      // КН
    CT_VHG = 0,
	
	// счетчики времен
	CT_T1, 				// 1мс
	CT_T20,     			// 20 мс
	// контрольные счетчики режимов, сек
	CT_1,
	CT_2,
	CT_3,
	CT_7,
	CT_8,
        CT_10,
	CT_23,
	CT23K1,
	CT_27,
	CT27K1,
        CT_28,
	CT_29,
	CT29K1,
	CT_30,
	CT30K1,
	CT_32,
	CT32K1,
	CT_34,
        CT34K1,
        CT_39,
        ct48,
        ct49,
        ctVrashPderj = 0,
        ctPderjSpd = 0;         // (тик) счетчик времени расчета скорости

//--ОТВЕТЫ--//
unsigned char
	otvet;	  // диалоговый ответ оператора
//---------------------------------------------------------------------------
//--Шаги и контрольные параметры подпрограмм--//
//---------------------------------------------------------------------------
unsigned char
	sh_   = 0,  // общая переменная передачи шага
	// (ПРД) локальная для режима переменная шага
	shr[SHR_COUNT+1],
	// локальная для режима переменная подшага
	sh[SHR_COUNT+1];

unsigned char PR_RAZKN = 0;     // признак КН
unsigned char PR_RC = 0;        // признак РЦ
unsigned char PR_DAVL_PODJ = 0; // признак поджига давл
unsigned char N_ST = 0;         // номер стадии
unsigned char N_ST_MAX = 6;    // номер максимальной стадии
unsigned int  SOPR = 0;	        // сопротивление
bool PR_VTMN = 0;               // признак включения ТМН
bool PR_SOPR_BM = 0;            // признак перехода БМ на малую мощность
unsigned int Z_SOPR = 0,        // сохраненное сопротивление
             ZU_SOPR = 0,       // сохраненный угол
             K_OSHIB = 0;
float   LogicT = 0.0;
bool    PR_Ar = 0;		// Признак работы РРГ1

//----------------------------------------------------------------------------
//-- ВЧМ  --//
//---------------------------------------------------------------------------
    unsigned char
	    VRGIS = 0,      // 1 - признак выхода на режим ВЧГ стола
	    K_SOGL_GIS= 67,  // заданный коэф-т согласования ВЧГ стола (~15%)
		NAPRS_GIS= 0;   // направление движения согласования ВЧГ стола
						// 0-прямое(>); 1-обратное(<)
	int
		X_TGIS,             // текущее значение падающей мощности
		E_TGIS,		    // текущая ошибка
		DELGIS,		    // модуль текущей ошибки
        DOPGIS = 5,	    // допустимая погрешность
		PAR_GIS = 0;	    // параметр ВЧГ стола
    unsigned int
		N_TEK_GIS,    	    // текущий коэф-т согласования ген.ВЧГ стола
        LIM1GIS,	    // предел ошибки регулирования (большой)
		LIM2GIS,	    // предел ошибки регулирования (малый)
		T_VRGIS=10,         // контрольное время выхода на режим (сек.)
		T_KGIS = 2;         // контрольное время определения ошибки(сек.)
//---------------------------------------------------------------------------
//--Механизм перемещения ДЗ--//
//---------------------------------------------------------------------------
	unsigned char
	KOM_DZ = 0,	// команда
	OTVET_DZ = 0,	// ответ
    V_DZ = 0,		// скорость
	TYPE_DZ = 0;	// тип движения

	bool
	PR_DZ = 0,		// признак работы механизма
	HOME_DZ = 0;	// признак движения в Home

	int
	PUT_DZ = 0,	// заданный путь
	TEK_ABS_DZ = 0,// текущий абсолютный путь
	TEK_OTN_DZ = 0;// текущий относительный путь

	unsigned int
	CT_DZ = 0;		// (1 мсек) счетчик режимов механизма
//----------------------------------------------------------------------------
//--УУН (UN - индекс устройства)--//
//----------------------------------------------------------------------------
unsigned char
      VRUN = 0;	                // 1 - признак выхода на режим УУН
int
	X_TUN,		        // текущее значение давления в магратронах
	E_TUN,		        // текущая ошибка
	DELUN,		        // модуль текущей ошибки
	E_PUN,		        // предыдущая ошибка
	K_PUN,		        // коэффициент P ж  выбираются
	K_IUN,		        // коэффициент I ж  из таблицы
	U_PUN,		        // предыдущая уставка
    A_VIH = 0;                  // выдача уставки
unsigned int
	LIMPUN=4095,            // верхний предел P-составляющей регулятора
	LIMIUN=4095,            // верхний предел I-составляющей регулятора
	LIM1UN,	                // предел ошибки регулирования (большой)
	LIM2UN,	                // предел ошибки регулирования (малый)
	LIMUUN=4095,            // ограничение по уставке(5 вольт)
	LIMU_UN,	        // нач.ограничение уставки при выходе на реж.
	LIMUPR_UN;              // нач.ограничение уставки после пробоя
	int PORCNV_UN;		// приращение нач.плавного выхода на режим
	int PORCPR_UN;		// приращение плавного выхода при пробое
unsigned char
	PROBUN = 0;             // признак отработки пробоя
unsigned int
	T_VRUN = 30,            // контр.время выхода на режим УУН (сек.)
	T_KUN = 3,              // контр.время определения ошибки (сек.)
	T_VREJ_UN=50,           // время плавного выхода на режим
					 // (в 20мс тиках)
	T_VPRB_UN=50,           // время плавного выхода при пробое
				         // (в 20мс тиках)
	T_REQUN = 80,           // время ограничения регулятора
					 // по быстродействию (в 1 мс тиках)
	CT_VRUN,	        // счетчик вр.выхода на режим
                                        // (в 20мс тиках)
	CT_PR_UN,	        // счетчик вр.выхода при пробое
					// (в 20мс тиках)
	CT_REQUN;	        // счетчик ограничения регулятора
				        // по быстродействию (в 1 мс тиках)
int
	SOUN,		        // сумматор остатков
	LOUN = 2000,	        // лимит остатков
	MZRUN[] =		// массивы для УУН:
	{1,5,10,50,100,200,500,1000,2000,7000},   // зон регулирования
	MKPUN[] = {20,30,30,30,30,30,30,30,30,30},// коэффициентов P
	MKIUN[] = {30,25,20,10,8,7,7,5,3,2},	  // коэффициентов I
	DOPUN = 200,	        // допустимая погрешность(0.5%)
	PAR_UN = 0;	        // параметр УУН
//------------------------------------------------------------------------------
//--БПН (Включение нагрева)  индекс устройства TEMP (нагрев по Т)
//-----------------------------------------------------------------------
bool
    PR_TEMP = 0;		    	// признак положительного ответа ТЕРМОДАТА
unsigned char
	KOM_TEMP = 2;		    	// команда опроса статуса ТЕРМОДАТА
unsigned int
	ZAD_TEMP = 0,		    	// уставка задания по температуре ТЕРМОДАТА
	PAR_TEMP  = 0,	    	        // параметр БПН
	ZPAR_TEMP = 0;		    	// зап. параметра температуры БПН1
	int X_TEMP;                     // текущее значение температуры
	unsigned char VRTEMP = 0;       // 1 - признак выхода на режим БПН
	int E_TEMP;		        // текущая ошибка
	int DELTEMP;		    	// модуль текущей ошибки
	unsigned int LIM1TEMP;	        // предел ошибки регулирования (большой)
	unsigned int LIM2TEMP;	        // предел ошибки регулирования (малый)
	unsigned int T_VRTEMP= 600;     // контрольное время выхода на режим (сек.)
	unsigned int T_KTEMP = 3;       // контрольное время определения ошибки(сек.)
	int DOPTEMP = 25;		// допустимая погрешность 4%

    unsigned int TEK_TEMP;          // текущая температура по каналу 1 (в ПРД)

    unsigned int ZAD_TEMP1 = 0;
    unsigned int ZAD_TEMP2 = 0;
    unsigned int ZAD_TEMP3 = 0;
    unsigned int ZAD_TEMP4 = 0;
    unsigned int TEK_TEMP1;
    unsigned int TEK_TEMP2;
    unsigned int TEK_TEMP3;
    unsigned int TEK_TEMP4;

    unsigned int TEK_TEMP_PIR = 0;
//------------------------------------------------------------------------------
//--БПМ (BM1 - для БПМ 1, BM2 - для БПМ2)--//
//------------------------------------------------------------------------------
bool VRBM = 0; // 1 - признак выхода БПМ на режим
                                          // массив ответов от БПМ1
unsigned int     OTVET_BM[10] = {0,0,0,0,0,0,0,0,0,0};
bool    PR_SV_BM = 0;            // признак полож. ответа по RS-каналу
int
    UST_BM,			          // уставка (расчитывается при ремпинге)
	X_TBM,                            // текущее значение мощности
	E_TBM,		                  // текущая ошибка
	DELBM,		                  // модуль текущей ошибки
	DOPBM = 5,		          // допустимая погрешность
    PAR_BM1 = 0,	                  // параметр БПМ1
    PAR_BM2 = 0,	                  // параметр БПМ2
    PAR_BM3 = 0;	                  // параметр БПМ3
unsigned int
	LIM1BM,	    // предел ошибки регулирования (большой)
	LIM2BM,	    // предел ошибки регулирования (малый)
    T_VRBM =10, //контрольное время выхода на режим (сек.)
    T_KBM  =3,  //контрольное время определения
	KOM_BM[5] = {4095,4095,0,0,010404};// массив заданий для БПМ
//------------------------------------------------------------------------------
//--ИИ (II - индекс устройства)--//
//------------------------------------------------------------------------------
bool VRII = 0;               // 1 - признак выхода ИИ на режим
                            // массив ответов от ИИ
unsigned int	OTVET_II[10] = {0,0,0,0,0,0,0,0,0,0};
bool PR_SV_II = 0;           // признак полож. ответа по RS-каналу
int
	X_TII,                  // текущее значение мощности
	E_TII,		            // текущая ошибка
	DELII,		            // модуль текущей ошибки
	DOPII = 5,		        // допустимая погрешность
    PAR_II = 0;	            // параметр ИИ
unsigned int                // массив команд к ИИ
	LIM1II,	                // предел ошибки регулирования (большой)
	LIM2II,	                // предел ошибки регулирования (малый)
	T_VRII = 10,            // контрольное время выхода на режим (сек.)
	T_KII = 3,              // контрольное время определения ошибки(сек.)
    KOM_II[5] = {0,4095,4095,0,010000};
//---------------------------------------------------------------------------
//----------------Прототипы---------------------------------------------------
void KOLCO();                // кольцо
void R_1();                  // режима 1 "Откачка камеры"
void R_2();                  // режима 2 "Рабочий цикл"
void R_3();                  // режима 3 "Тренировка"
void R_4();                  // режима 4 "Сброс РЦ"
void R_5();                  // режима 5 "Отключение установки"
void R_7();                  // режима 7 "Отпыл М1"
void R_8();                  // режима 8 "Отпыл М2"
void R_9();                  // режима 9 "Авар. откл. установки"
void R_10();                 // режима 10 "Отпыл М3"
void R_20();                 // режима 20 "РРГ1"
void R_21();                 // режима 21 "РРГ2"
void R_23();                 // режима 23 "Вкл. УУН"
void R_27();                 // режима 27 "Вкл. нагрев"
void R_28();                 // режима 28 "Откл. нагрев"
void R_29();                 // режима 29 "Вкл. БПМ1"
void R_30();                 // режима 30 "Вкл. БПМ2"
void R_31();                 // режима 31 "Откл. БПМ"
void R_32();                 // режима 32 "Вкл. ИИ"
void R_33();                 // режима 33 "Откл. ИИ"
void R_34();                 // режима 34 "Вкл. ВЧМ"
void R_36();                 // режима 36 "Откл. нагрев (ручн.)"
void R_37();                 // режима 37 "Открыть затвор ДЗ"
void R_38();                 // режима 38 "Закрыть затвор ДЗ"
void R_39();                 // режима 39 "Затвор ДЗ в дросс"
void R_40();                 // режима 40 "Барабан в исх."
void R_41();                 // режима 41 "Вкл. вращ. барабана"
void R_42();                 // режима 42 "Заслонка в исх."
void R_43();                 // режима 43 "Вкл. вращ. заслонки"
void R_44();                 // режима 44 "Крышка вверх"
void R_45();                 // режима 45 "Крышка вниз"
void R_48();                 // режима 48 "Тр. тест заслонки"
void R_49();                 // режима 49 "Тр. тест барабана"
void R_50();                 // режима 50 "Импульс заслонки"
void R_52();                 // режима 52 "Импульс барабана"
void R_53();                 // режима 52 "ДЗ вперед назад"

void POST();                 // дешифрация команд оператора
void DIAGN_KOLCO();          // диагностика в кольце
void AVAR_DAVL();            // "Реакция на высокое давление в камере при работе ТМН"
void AVAR_VODA_BM();         // реакция на пропадание воды в магнетронах
void AVAR_VODA_II();         // реакция на пропадание воды в нагревателе
void UPR_AVAR_OTKL();        // управление режимом R_9
void VID_DIAGN_GIS();           // выдача диагностики нет согласования ВЧМ
void RES_D1();		     // защита вак. датчика Д1 при открытии Кл3
void Bar_Spd_Calc();         // расчет скорости барабана
void Sopr_Calc();            // расчет сопротивления
void AVAR_VRASH_BAR();

void VIDK_DZ(unsigned char,unsigned char,int,bool,unsigned int);

void RABUN();		        // работа УУН
void VIBPAR_UN();		// выбор параметра УУН
void REQUN();	        	// регулятор УУН
void UN_G();		        // регулятор УУН с отработкой пробоя
void UN_D();
void VIBPAR_UN();		     // выбор параметра УУН
void REQUN();		             // регулятор УУН
void RLIMUN();	                     // расчет LIM1,LIM2 для УУН
void PDUN();               	     // подготовка аналоговых данных УУН
void VBKUN();			     // выбор коэф-тов регулятора УУН

void VIBPAR_TEMP();		     // выбор параметра БПН
void VIDK_TEMP (int,int,int,int);    // выдать задание по температуре
void PDTEMP ();                      // Подготовка аналоговых данных
void RLIMTEMP();	             // расчет LIM для БПН
void VIDK_TEMP(int,int,int,int);     // выкл. БПН 0 температуры

void VIBPAR_II();		     // выбор параметра ИИ
void RLIMII();	  	             // задание LIM для ИИ
void PDII ();                        // Подготовка аналоговых данных
void VIDK_II(int,int,int,int,int);   // вкл. ИИ

void VKBPM1();                       // вкл. пускатель М1
void VKBPM2();                       // вкл. пускатель М2
void OKBPM();                        // откл. пускатель БПМ

void VIBPAR_BM1();		     // выбор параметра БПМ1
void RLIMBM1();	  	             // задание LIM для БПМ1
void PDBM1();                        // Подготовка аналоговых данных БПМ1
void VIBPAR_BM2();		     // выбор параметра БПМ2
void RLIMBM2();	  	             // задание LIM для БПМ2
void PDBM2();                        // Подготовка аналоговых данных БПМ2
void VIBPAR_BM3();		     // выбор параметра БПМ1
void RLIMBM3();	  	             // задание LIM для БПМ1
void PDBM3();                        // Подготовка аналоговых данных БПМ1
void VIDK_BM(int,int,int,int,int);   // выдача команд на БПМ

void VIDK_DZASL(int, int, int, int);  // управление VAT-д.заслонкой
void VIBPAR_ZSL();
void VIBPAR_ZSL_POZ();
void VDZASL ();	                // подпрограмма "Открыть дросс. заслонку"
void ODZASL ();	                // подпрограмма "Закрыть дросс. заслонку"

void OSBROS();			// общий сброс
void SBROS_MEH();		// сброс механики
void SBROS_DZ();		// сброс механизмов ДЗ
void SBROSR_23();		// сброс режима 23 "УУН"
void SBROSR_34();		// сброс режима 34 "ВЧМ"

void VBPN();                    // включить БПН
void OBPN();                    // отключить БПН

void MEH_AVAR_CHK();             //сброс аварии механизмов в кольце
void MEH_AVAR_SBROS();              //сброс аварии механизмов по кнопке

void VRR_GIS ();	        // подпрограмма "Выставить разр. работы ВЧГ п/д"
void ORR_GIS ();	        // подпрограмма "Снять разр. работы ВЧГ п/д"

void VIBPAR_GIS();	        // подпрограмма "Выбор параметра для ВЧГ п/д"
void RLIMGIS();		        // подпрограмма "Расчет LIM для ВЧГ п/д"
void PDGIS();			    // подготовка аналоговых данных ВЧГ п/д

void VTMN();	                // включить ТМН
void OTMN();	                // отключить ТМН

void KR_VVERH();		// подпрограмма "Крышка вверх"
void KR_VNIZ();			// подпрограмма "Крышка вверх"

void NAP_KAM();			// подпрограмма "Напуск в камеру"

extern
    void A_OUT(unsigned int Nmb, unsigned int Value); // задание аналогового выхода
extern
    void SetOut(bool, unsigned char, unsigned int);   // управление дискретным сигналом

#define ABS 1
#define OTN 2

#endif

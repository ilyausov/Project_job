
#define ZIN_COUNT      5
#define OUT_COUNT      5
#define AIK_COUNT      3
#define A_OUT_COUNT    3
#define PAR_ROW		32  // максимальное количество шагов в рецепте  0 и 31 не используются!
#define PAR_COUNT 	14
#define PAR_NAGR	24
#define KL_COUNT 21 //колличество клапанов
#define step_count_max 1000
//------------------------------------------------------------------------------
float
    RRG1_MAX    = 18.0,    // максимальный расход РРГ1
    RRG2_MAX    = 9.0,       // максимальный расход РРГ2
    RRG3_MAX    = 9.0,       // максимальный расход РРГ3
    RRG4_MAX    = 3.6,       // максимальный расход РРГ4
    RRG5_MAX    = 9.0,       // максимальный расход РРГ5
    RRG6_MAX    = 18.0,       // максимальный расход РРГ6
    RRG7_MAX    = 18.0,       // максимальный расход РРГ7
    P_IP_MAX    = 600.0,      // максимальная мощность ИП
    CESAR_MAX_IP = 600.0,    // максимальная падающая мощность CESAR ИП
    CESAR_MIN_IP = 0.0,       // минимальный падающая мощность CESAR  ИП
    MEX_MIN = -2147483647,    // минимальный путь механики
    MEX_MAX = 2147483647;     // максимальный путь механики
//------------------------------------------------------------------------------
// Инициализация прототипов динамически создаваемых элементов формата
        // создание надписей для страницы контроля
        TLabel  *Cnt[11][5];
        // создание надписей и кнопок Zin-ов
        TLabel    *Title_Zin[ZIN_COUNT][16];
        TImage *Check_Zin[ZIN_COUNT][16];
        TLabel *Lb_Klapan [KL_COUNT];
        TImage *Cb_Klapan [KL_COUNT];
        TLabel *Lb_Klapan_Info [KL_COUNT];
        TImage *Cb_Klapan_Info [KL_COUNT];
        // создание надписей и кнопок Out
        TLabel    *Title_Out[OUT_COUNT][16];
        TButton   *Btn_Out[OUT_COUNT][16];
        TImage *Check_Out[OUT_COUNT][16];

        // создание надписей и кнопок Aik
        TLabel  *Title_Ain[AIK_COUNT][8];
        TEdit   *Dec_Ain[AIK_COUNT][8];
        TEdit   *UV_Ain[AIK_COUNT][8];
        TCGauge *CG_Ain[AIK_COUNT][8];
		TLabel *LDec_Ain[AIK_COUNT];
		TLabel *LUv_Ain[AIK_COUNT];

        // создание надписей и кнопок Aout
        TLabel     *Title_Aout[A_OUT_COUNT][4];
        TEdit      *Dec_Aout[A_OUT_COUNT][4];
        TEdit      *UV_Aout[A_OUT_COUNT][4];
        TCGauge    *CG_Aout[A_OUT_COUNT][4];
        TEdit      *Dec_Aout_zad[A_OUT_COUNT][4];
        TEdit      *UV_Aout_zad[A_OUT_COUNT][4];
        TCGauge    *CG_Aout_zad[A_OUT_COUNT][4];
        TButton    *Zero_Aout[A_OUT_COUNT][4];
        TButton    *Ent_Aout[A_OUT_COUNT][4];
        TScrollBar *Zad_Aout[A_OUT_COUNT][4];
		TLabel *LDec_Aout[A_OUT_COUNT];
		TLabel *LUv_Aout[A_OUT_COUNT];

        // вывод параметров нагревов
        TLabel *Zad_Nagr[PAR_NAGR];
        TLabel *Tek_Nagr[PAR_NAGR];
//------------------------------------------------------------------------------
#define SERIES_COUNT 10
// массив отображения текущих графиков
TLineSeries
    *serTemp[SERIES_COUNT],
    *serArh[SERIES_COUNT];
//------------------------------------------------------------------------------

        // переменные менеджера внутренних плат
        unsigned int
        // переменная диспетчера встроенных устройств (плат ISO)
        externalTask = 0x0000,
        externalError = 0;      // код ошибки при опросе внутренних устройств (плат ISO)

//------------------------------------------------------------------------------
// переменные для организации доступа

AnsiString pas_str,    // сформированная строка ввода
           Vpas_str,   // введенный пароль
           Vtekpas_str,   // введенный тек. пароль
           Vnew1pas_str,  // введенный новый 1 пароль
           Vnew2pas_str;  // введенный новый 2 пароль

char *loc_udb="Modules\\acc.udb"; // адрес файла сохранения пароля и настройки

struct IDINIFILE
{
 char pass[30];
 bool state[10];
};

IDINIFILE iniID;
struct kl
{
    int adr;
    AnsiString name;
    bool opcl[21];
    AnsiString hash;
};

    kl klinfo[step_count_max];


TTreeNode*Node [step_count_max];
int state=1;
//------------------------------------------------------------------------------
bool
    com1_err_alarm = false,
    com2_err_alarm = false,
    com3_err_alarm = false,
    com4_err_alarm = false,
    firstSec = true,
    ust_ready = false,
    pr_otl = 0,                    // признак режама отладки
    mnemoInAuto = true;
unsigned int
        com3_err = 0;

int
    zagolState = 0; // 0 - общие
                    // 1 - поз 1 и т.д.

bool anim_fase = 0;                 // фаза анимации мнемосхемы
bool plzm = true;
float logic_time = 0.0;
//------------------------------------------------------------------------------
//------------ Организация таблицы ввода параметров автомата -------------------
//------------------------------------------------------------------------------
#define SH_NUM 50    // количество сохраненных рецептов

unsigned int SH_List[SH_NUM + 1] =
    {
        0,          // 0
        0,      // 1
        0,      // 2
        0x484,      // 3
        0x494,          // 4
        0x495,      // 5
        0x10495,      // 6
        0x495,      // 7
        0x8494,          // 8
        0x494,      // 9
        0x684,       // 10
        0x20002,      // 11
        0x20000,      // 12
        0x2010B,      // 13
        0x22A03,          // 14
        0x2000B,      // 15
        0x400,      // 16
        0x20000,      // 17
        0x20000,          // 18
        0x20000,      // 19
        0x400,       // 20
        0x400,      // 21
        0x20002,       // 22
        0x400,          // 23
        0x10405,      // 24
        0x405,        // 25
        0x10405,      // 26
        0x10415,       // 27
        0x8405,          // 28
        0x421,       // 29
        0x401,          // 30
        0x402,          // 31
        0xC02,          // 32
        0x402,          // 33
        0x402,           // 34
        0x20006,           // 35
        0x20120,           // 36
        0x2190B,           // 37
        0x2012B,           // 38
        0x20303,           // 39
        0x20300,           // 40
        0x20300,           // 41
        0x20120,           // 42
        0x20306,           // 43
        0x20120,           // 44
        0x38115,           // 45
        0x20135,           // 46
        0x20305,           // 47
        0x20306,           // 48
        0x20120,           // 49
        0x20000           // 50

    };

AnsiString SH_Names[SH_NUM + 1] =
    {
        "0",          							// 0
        "Количество циклов",      				// 1
        "Возврат",      						// 2
        "ТЕРМО1 Откачка",      					// 3
        "ТЕРМО1 Нагрев",          				// 4
        "ТЕРМО1 Подготовка",      				// 5
        "ТЕРМО1 Подача прекурсора 4",      		// 6
        "ТЕРМО1 Продувка прекурсора 4",			// 7
        "ТЕРМО1 Подача прекурсора 3",          	// 8
        "ТЕРМО1 Продувка прекурсора 3",			// 9
        "ТЕРМО1 Откачка прекурсора 3",      	// 10
        "ПЛАЗМА Откачка после загрузки",		// 11
        "ПЛАЗМА Нагрев пластины на п/д",		// 12
        "ПЛАЗМА Выход на давл. перед прек.",	// 13
        "ПЛАЗМА Подача прекурсора 1",			// 14
        "ПЛАЗМА Продувка после прекурсора 1",	// 15
        "—",			                        // 16
        "ПЛАЗМА Выход на давл. перед плазмой",	// 17
        "ПЛАЗМА Подача прекурсора плазма",		// 18
        "ПЛАЗМА Продувка после плазмы",		    // 19
        "—",		// 20
        "—",		// 21
        "ПЛАЗМА Откачка для выгрузки пластины",		// 22
        "—",		// 23
        "ТЕХНО Подача прекурсора 4",			// 24
        "ТЕХНО1 Откачка прекурсора 4",			// 25
        "ТЕХНО2 Откачка прекурсора 4",			// 26
        "ТЕХНО Продувка прекурсора 4",			// 27
        "ТЕХНО3 Подача прекурсора 3",			// 28
        "Подача прекурсора 5",			// 29
        "Откачка прекурсора 5",			// 30
        "ДЕГАЗ 1 Откачка после загрузки пластины",			// 31
        "ДЕГАЗ 2 Подача прекурсора",			// 32
        "ДЕГАЗ 3 Откачка после прекурсора",			// 33
        "ДЕГАЗ 4 Откачка для выгрузки пластины", 			// 34
        "Откачка ", 			            // 35    1
        "Подготовка прекурсора 1", 			// 36    2
        "Подача прекурсора 1", 			    // 37    3
        "Продувка прекурсор 1", 			// 38    4
        "Откачка прекурсор 1", 			    // 39    5
        "Подготовка плазма", 			    // 40    6 14
        "Подача плазма", 			        // 41    7 15
        "Продувка плазма", 			        // 42    8 16
        "Откачка плазма", 			        // 43    9
        "Подготовка прекурсора 2", 			// 44    10
        "Подача прекурсора 2", 			    // 45    11
        "Продувка прекурсора 2", 			// 46    12
        "Откачка прекурсора 2", 			// 47    13
        "Откачка плазма ", 			        // 48    17
        "Подготовка прекурсора 1", 			// 49    18
        "Откачка плазма 1" 			    // 50    19
    };

unsigned char   SHarr_lib_size = 0,   // текущее число шагов в выбранной библиотеке
                SHarr_size = 2;   // текущее число шагов в рецепте

AnsiString Tek_Rec_Name = " Рецепт: Новый рецепт",
           Tek_LibRec_Name = "";

unsigned int    ActCell_Rec = 1,
                ActCell_Step = 1;   // номер активной ячейки


bool    pr_yel = 0,
        pr_lib = 0,     // признак выбора библиотеки
        pr_cikl = 0,    // признак наличия шага "Количество циклов"
        pr_rtrn = 0,    // признак наличия шага "Возврат"
        pr_err=0,       // признак ошибки
        rec_chng = 0;   // признак что рецепт изменен

//------------------------------------------------------------------------------
// работа с библиотеками
int libNmb = -1;    // номер выбранной библиотечной программы

struct LIBSTR
{
    AnsiString par_lib[PAR_ROW][PAR_COUNT];
};

LIBSTR iniLib;
//------------------------------------------------------------------------------
struct ParNSTR
{
    unsigned int par_n[PAR_NAGR];
};

ParNSTR iniParN;
//------------------------------------------------------------------------------
// Изменение названия газов
unsigned char GK_n = 0;         // номер канала изменяемого газа

char *loc_gas_udb="Modules\\gases.udb"; // адрес файла сохранения

struct GAS_FILE	// структура массива
{
    char Gas_names[12][8];
};

GAS_FILE iniGAS;
//------------------------------------------------------------------------------

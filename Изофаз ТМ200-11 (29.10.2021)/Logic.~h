//---------------------------------------------------------------------------
#ifndef LogicH
#define LogicH
//---------------------------------------------------------------------------
#include "Math.h"
//---------------------------------------------------------------------------
//--ДЕКЛАРИРОВАНИЕ ПЕРЕМЕННЫХ--//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
//--Норма и диагностики--//
//---------------------------------------------------------------------------
#define DIAGN_COUNT   35
#define DIAGN_S_COUNT  3
#define ZIN_COUNT      5
#define OUT_COUNT      5
#define AIK_COUNT      3
#define A_OUT_COUNT    3
#define SHR_COUNT      83
#define NASMOD_COUNT   18
#define PAR_TRANS     6

unsigned char
	norma = 0,			// (ПРД) норма
	qkk = 0,			// (ПРM) код команды
	diagn[DIAGN_COUNT],             // (ПРД) диагностики общие, обнуление перед main
	diagnOld[DIAGN_COUNT],          // диагностики архивные
	diagnS[DIAGN_S_COUNT],          // (ПРД) диагностики связей с устройствами по RS
	diagnSOld[DIAGN_S_COUNT];       // диагностики связей с устройствами архивные

//---------------------------------------------------------------------------
//--Дискретные входы-выходы--//
//---------------------------------------------------------------------------
unsigned int
    out[OUT_COUNT]={0,0,0,0,0},
    zin[ZIN_COUNT]={0,0,0,0,0},	    // (ПРД) дискретные входы, 0 - свободный
    aik[AIK_COUNT * 8],         // (ПРД) аналоговые входы
    out_Z[ZIN_COUNT]={0,0,0,0}, // запоминание для отображения
    zin_Z[ZIN_COUNT]={0,0,0,0}, // запоминание для отображения
    aout[A_OUT_COUNT * 4] = {8192},
    aoutKon[A_OUT_COUNT * 4] = {8192},
//---------------------------------------------------------------------------
//--Уровни вакуума--//
//---------------------------------------------------------------------------
	// текущий уровень вакуума (Д1,Д2,Д3,Д4)
	D_D1 = 0, D_D2 = 0, D_D3 = 0, D_D4 = 0,
    UVAK_KAM = 4056,          // 8Па откачка камеры (972)
    POROG_DAVL = 6800,      // 100Па порог превышения давления в камере (MTM9D)
    UVAKV_KAM = 6142,       // 8Па по (MTM9D)
    UVAKN_KAM = 6439,       // 25Па по (MTM9D)
    UVAK_SHL_MO = 6574,     // 500Па по (ПМТ)
    UVAK_SHL_MN = 6574,     // 500Па по (ПМТ)
    UVAK_ZTMN = 5477,       // 40Па по (ПМТ)
    UATM_D1 = 8866,         // атмосфера по (ПМТ)
    UATM_D4 = 8572;         // атмосфера по (MTM9D)
    
//---------------------------------------------------------------------------
//--Настроечные и управляющие массивы--//
//---------------------------------------------------------------------------
unsigned int	nasmod[NASMOD_COUNT] = {0};
/////////////////////////////////////////////////////////////////////////////////////////////////
#define PAR_ROW		32  // максимальное количество шагов в рецепте  0 и 31 не используются!
#define PAR_COUNT 	21
#define PAR_NAGR	24
/////////////////////////////////////////////////////////////////////////////////////////////////
// массив рабочих параметров
unsigned int par[PAR_ROW][PAR_COUNT] = {0};
// массив временного ввода параметров
unsigned int par_temp[PAR_ROW][PAR_COUNT] = {0};
// массив параметров для каналов
unsigned int par_n[PAR_NAGR] = {0};
// массив параметпров для управления манипуляторами
long par_t[PAR_TRANS]            = {0};
//	ПЕР в Касс - par_t[1]
//	ПЕР в Кам - par_t[2]
//	ПОВ к Кам - par_t[3]
//	КАСС на шаг(h) - par_t[4]
//	КАСС на шаг переукл.(h1) - par_t[5]
//---------------------------------------------------------------------------
//--Контрольные времена воздействий--//
//---------------------------------------------------------------------------
// времена и счетчики даны в секундах, если нет обратных комментариев
unsigned int

	// текущее время для процессов
	T_VHG			= 5,   // к.время выставления р/р ВЧГ
	T_ZAD_DVS		= 25,  // (тик)(0.5сек.) задержка на вкл.кнопок
	T_PROC			= 0,   // время технологического процесса
	T_KTMN_RAZGON	        = 180, // к.время разгона ТМН
	T_KKAM_V		= 300, // 300 сек. контр. время ВВ откачки камеры
	T_VODA			= 5,   // сек. реакция на пропадание воды
	T_STOP			= 25,  // (тик) время на стоп двигателей УС
	T_DVIJ			= 25,  // (тик) время на переключение направл. двигателей УС
	T_KDVIJ_SU		= 3000,  // (тик)(60 сек) контрольное время движения УС конденсатора
	T_KSUT			= 30,  // (20мс тик.) 0,6 сек. задержка УС на переключение движения
	T_KKAM			= 1200,
	T_KTMN			= 900,
	T_KSHL			= 150, // к.время фороткачки шлюза
	T_KNAP			= 120, // к.время напуска в шлюз
	T_NAPUSK		= 5,
	 T_KSHL_MO       = 180,
	// контрольные счетчики времени
	CT_VHG = 0,
	CT_VODA_IP = 0,		        // отстутствия воды в столе
	CT_PER = 0,
    CT_POV = 0,
    CT_KAS = 0,
	CT_TEMP = 0,		        // счетчик Нагрева 

	CT_DVIJ_GIR_g = 0,		// счетчик двигателя УС реактора(грубо)
	CT_DVIJ_GIR_t = 0,		// счетчик двигателя УС реактора(точно)
	CT_SUT_g = 0,			// счетчик на переключение напр.(грубо)
	CT_SUT_t = 0,			// счетчик на переключение напр.(точно)
		
	// счетчики времен
    CT_T1, 				// 1мс
    CT_T20,     			// 20 мс
	
	// контрольные счетчики режимов, сек
	CT_1,
	CT_2,
	CT_3,
	CT_4,
	CT_5,
	CT_6,
	CT_7,
	CT_9,
	CT_17,
	CT17K1,
	CT_29,
	CT29K1,
	CT_30T;

//---------------------------------------------------------------------------

//--ОТВЕТЫ--//
unsigned char
	otvet;	  // диалоговый ответ оператора
	
//---------------------------------------------------------------------------
//--Шаги и контрольные параметры подпрограмм--//
//---------------------------------------------------------------------------
unsigned char
	sh_   = 0,         		// общая переменная передачи шага
	// (ПРД) локальная для режима переменная шага
	shr[SHR_COUNT+1],
	// локальная для режима переменная подшага
	sh[SHR_COUNT+1];
unsigned char
        zshr3;
unsigned char
		PR_TRTEST = 0,			// признак окончания транспортного теста
		PR_OTK = 0,
		PR_FK_KAM = 0,
		PR_NASOS = 0,
		PR_NALADKA = 0,
		N_PL = 0,
		N_ST_MAX = 30,
		N_ST = 0,
        ZN_ST = 0;
unsigned int
        N_ZICL = 0;
//int     h = 792; //79167;
bool	PR_MAN = 0,				// признак нахождения руки в рабочем
        PR_KLASTER=1;
//---------------------------------------------------------------------------
//--Дроссельная заслонка--//
//---------------------------------------------------------------------------
bool
	PR_DZASL = 0;		    		// признак наличия полодительного ответа заслонки
unsigned char
	OTVET_DZASL = 0;
unsigned int
	CT_DZASL = 0,
	DAVL_DZASL = 0,
	DATA_DZASL = 0,		    		// уставка задания заслонка (в ПРД)
	PAR_DZASL  = 0,	            	// параметр заслонки
	ZPAR_DZASL = 0;               	// зап. параметра давления заслонки
	int X_TDZASL;                 	// текущее значение давления
	unsigned char VRDZASL = 0;    	// 1 - признак выхода на режим заслонки
	int E_TDZASL;		    		// текущая ошибка
	int DELDZASL;		    		// модуль текущей ошибки
	unsigned int LIM1DZASL;	    	// предел ошибки регулирования (большой)
	unsigned int LIM2DZASL;	    	// предел ошибки регулирования (малый)
	unsigned int T_VRDZASL=10;   	// контрольное время выхода на режим (сек.)
	unsigned int T_KDZASL = 2;    	// контрольное время определения ошибки(сек.)
	int DOPDZASL = 10;	    		// допустимая погрешность 10%
	unsigned char KOM_DZASL = 0; 	//код команды заслонки
    int TEK_DAVL_DZASL;
    unsigned int TEK_POZ_DZASL;
//---------------------------------------------------------------------------
//--СУ и ИП--//
//---------------------------------------------------------------------------
unsigned char
    prDvijGir_g = 0,              // признак движения ИП реактора: 0 - нет движения, 1 - есть движение
    prDvijGir_t = 0;
unsigned int
	DOP_SU = 5,                 // допуск движения в точку
    T_SM_NAPR = 30,             //(тик)(0.6сек.)Задержка на смену направлений
    DOP_DV_IP = 205;            // допуск движения (перебег) СУ 0,5В

bool
    klGir_gV = 0,             // признак нажатия клавиши "вперёд" реактора(грубо)
    klGir_gN = 0,             // признак нажатия клавиши "назад"  реактора(грубо)
    klGir_tV = 0,             // признак нажатия клавиши "вперёд" реактора(точно)
    klGir_tN = 0;             // признак нажатия клавиши "назад"  реактора(точно)
//----------------------------------------------------------------------------	
//--ВЧГ реактора--//
//---------------------------------------------------------------------------
    unsigned char
	    VRGIR = 0,          // 1 - признак выхода на режим ВЧГ реактора
	    K_SOGL_GIR=67,      // заданный коэф-т согласования ВЧГ реактора (~15%)
	    NAPRS_GIR= 0; 	    // направление движения согласования ВЧГ стола
                            // 0-прямое(>); 1-обратное(<)
    int
        X_TGIR,             // текущее значение падающей мощности
	    E_TGIR,		        // текущая ошибка
	    DELGIR,		        // модуль текущей ошибки
        DOPGIR = 5,		    // допустимая погрешность
	    PAR_GIR = 0;	    // параметр ВЧГ стола
    unsigned int
	    N_TEK_GIR,    	    // текущий коэф-т согласования ген.ВЧГ реактора
        LIM1GIR,	        // предел ошибки регулирования (большой)
	    LIM2GIR,	        // предел ошибки регулирования (малый)
	    T_VRGIR=10,         // контрольное время выхода на режим (сек.)
	    T_KGIR = 2,         // контрольное время определения ошибки(сек.)
	    N_PRED_GIR;	        // запомненный (предыдущий) коэф-т
                            // согласования генератора ВЧГ реактора
//---------------------------------------------------------------------------
//--Связь между транспортом и модулем--//
//---------------------------------------------------------------------------
unsigned int
	OTVET_MOD,
	KOM_MOD;
//---------------------------------------------------------------------------
//--Механизм перемещения--//
//---------------------------------------------------------------------------
	unsigned char
	KOM_PER = 0,	// команда
	OTVET_PER = 0,	// ответ
	V_PER = 0,		// скорость	
	TYPE_PER = 0;	// тип движения
	
	bool
	PR_PER = 0,		// признак механизма
	HOME_PER = 0;	// признак движения в Home

	int
	PUT_PER = 0,	// абсолютный путь
	TEK_ABS_PER = 0,
	TEK_OTN_PER = 0;
//---------------------------------------------------------------------------
//--Механизм поворота--//
//---------------------------------------------------------------------------
	unsigned char
	KOM_POV = 0,	// команда
	OTVET_POV = 0,	// ответ
	V_POV = 0,		// скорость
	TYPE_POV = 0;	// тип движения
	
	bool
	PR_POV = 0,		// признак механизма
	HOME_POV = 0;	// признак движения в Home

	int
	PUT_POV = 0,	// абсолютный путь
	TEK_ABS_POV = 0,
	TEK_OTN_POV = 0;
//---------------------------------------------------------------------------
//--Механизм кассеты--//
//---------------------------------------------------------------------------
	unsigned char
	KOM_KAS = 0,	// команда
	OTVET_KAS = 0,	// ответ
	V_KAS = 0,		// скорость
	TYPE_KAS = 0;	// тип движения
	
	bool
	PR_KAS = 0,		// признак механизма
	HOME_KAS = 0;	// признак движения в Home

	int
	PUT_KAS = 0,	// абсолютный путь
	TEK_ABS_KAS = 0,
	TEK_OTN_KAS = 0;
//------------------------------------------------------------------------------
//----------------Прототипы---------------------------------------------------
//------------------------------------------------------------------------------
void R_1();                  // режима 1 "Откачка камеры"
void R_2();                  // режима 2 "Откачка шлюза"
void R_3();                  // режима 3 "Рабочий цикл"
void R_4();                  // режима 4 "Технологический процесс"
void R_5();                  // режима 5 "Сброс РЦ"
void R_6();                  // режима 6 "Сбор пластин"
void R_7();                  // режима 7 "Отключение установки"
void R_8();                  // режима 8 "Аварийное отключение установки"
void R_9();                  // режима 9 "Транспортный тест"
void R_10();                 // режима 10 "Открыть ЩЗ"
void R_11();                 // режима 11 "Закрыть ЩЗ"
void R_12();                 // режима 12 "Ман. перем. в исх"
void R_13();                 // режима 13 "Ман. перем. вперед/назад"
void R_14();                 // режима 14 "Ман. пов. в исх"
void R_15();                 // режима 15 "Ман. пов. вперед/назад"
void R_17();                 // режима 17 "Дросселирование ДЗ"
void R_18();                 // режима 18 "Открыть ДЗ"
void R_19();                 // режима 19 "Закрыть ДЗ"
void R_20();                 // режима 20 "РРГ1"
void R_21();                 // режима 21 "РРГ2"
void R_22();                 // режима 22 "РРГ3"
void SBROSR_27();            // сброс ВЧГ п/д
void R_28();                 // режима 28 "Вкл. ВЧГ стола(смещ)"
void R_29();                 // режима 29 "Вкл. ВЧГ ИП"
void SBROSR_29();            // сброс ВЧГ ИП
void R_23();                 // режима 23 "РРГ4"
void R_24();                 // режима 24 "РРГ5"
void R_25();                 // режима 25 "РРГ6"
void R_26();                 // режима 26 "РРГ7"
void R_29();                 // режима 29 "Вкл. ВЧГ ИП"
void R_30();                 // режима 30 "Автосогл. ВЧГ ИП(точно)"
void R_31();                 // режима 31 "Движ. в точку ВЧГ ИП(грубо)"
void R_32();                 // режима 32 "Движ. в точку ВЧГ ИП(точно)"
void R_33();                 // режима 33 "Вкл. нагрева установки"
void R_34();                 // режима 34 "Откл. нагрева установки"
void R_37();                 // режима 37 "Ман. кас. в исх"
void R_38();                 // режима 38 "Ман. кас. вверх/вниз"
void R_40();				 // режима 40 "Вкл. нагрев канала 1"
void R_41();				 // режима 41 "Откл. нагрева канала 1"
void R_42();				 // режима 42 "Вкл. нагрев канала 2"
void R_43();				 // режима 43 "Откл. нагрев канала 2"
void R_44();				 // режима 44 "Вкл. нагрев канала 3"
void R_45();				 // режмиа 45 "Откл. нагрев канала 3"
void R_46();				 // режима 46 "Вкл. нагрев канал 4"
void R_47();				 // режима 47 "Откл. нагрева канала 4"
void R_48();				 // режима 48 "Вкл. нагрева канала 6"
void R_49();				 // режима 49 "Откл. нагрева канала 6"
void R_50();				 // режима 50 "Вкл. нагрева канала 7"
void R_51();				 // режима 51 "Откл. нагрева канала 7"
void R_52();				 // режима 52 "Вкл. нагрева канала 8"
void R_53();				 // режима 53 "Откл. нагрева канала 8"
void R_54();				 // режима 54 "Вкл. нагрева канала 9"
void R_55();				 // режима 55 "Откл. нагрева канала 9"
void R_56();				 // режима 56 "Вкл. нагрева канала 10"
void R_57();				 // режима 57 "Откл. нагрева канала 10"
void R_58();				 // режима 58 "Вкл. нагрева канала 11"
void R_59();				 // режима 59 "Откл. нагрева канала 11"
void R_60();				 // режима 60 "Вкл. нагрева канала 12"
void R_61();				 // режима 61 "Откл. нагрева канала 12"
void R_62();				 // режима 62 "Вкл. нагрева канала 13"	
void R_63();				 // режима 63 "Откл. нагрева канала 13"
void R_64();				 // режима 64 "Вкл. нагрева канала 14"
void R_65();				 // режима 65 "Откл. нагрева канала 14"
void R_66();				 // режима 66 "Вкл. нагрева канала 15"
void R_67();				 // режима 67 "Откл. нагрева канала 15"
void R_68();				 // режима 68 "Вкл. нагрева канала 16"
void R_69();				 // режима 69 "Откл. нагрева канала 16"
void R_70();				 // режима 70 "Вкл. нагрева канала 17"
void R_71();				 // режима 71 "Откл. нагрева канала 17"
void R_72();				 // режима 72 "Вкл. нагрева канала 18"
void R_73();				 // режима 73 "Откл. нагрева канала 18"
void R_74();				 // режима 74 "Вкл. нагрева канала 19"
void R_75();				 // режима 75 "Откл. нагрева канала 19"
void R_76();				 // режима 76 "Вкл. нагрева канала 20"
void R_77();				 // режима 77 "Откл. нагрева канал 20"
void R_78();				 // режима 78 "Вкл. нагрева канала 21"
void R_79();				 // режима 79 "Откл. нагрева канала 21"
void R_80();                 // режима 80 "Вкл. нагрева канала 23"
void R_81();				 // режима 81 "Откл. нагрева канала 23"
void R_82();                 // режима 82 "Вкл. нагрева канала 24"
void R_83();				 // режима 83 "Откл. нагрева канала 24"
//---------------------------------------------------------------------------
//--ФУНКЦИИ КОЛЬЦА--//
//---------------------------------------------------------------------------
void KOLCO();   		// подпрограмма кольцо (диагн., реакция на аварии)

void OSBROS();			// общий сброс
void TIME ();			// таймеры
void POST ();   		// приём и дешифрация команд

void DIAGN_KOLCO();              	// диагностика в кольце
void AVAR_VODA_IP();   			 	// реакция на пропадание воды в п/держ
void AVAR_DAVL();					// "Реакция на высокое давление в камере при работе ТМН"
void UPR_AVAR_OTKL();				// управление аварийным отключением
void UPR_R_30();					// управление режимом автосогл.
void VID_DIAGN_GIR();            	// выдача диагностики нет согласования ВЧГ ИП
void OKNSGIR_g();					// отработка кнопок грубо ВЧГ ИП
void OKNSGIR_t();					// отработка кнопок точно ВЧГ ИП
void ZashDD();                   	// подпрограмма защиты датчика
void OpenFK_TMN_CloseFK_SHL();		// Подпрограмма: Принудительное открытие ФК-ТМН и закрытие ФК-Шл
void MEH_AVAR_CHK();				// слежение за авриями механизмов
void MEH_AVAR_SBROS();
void Vkl_FK_TMN();
void UPR();						// подъём/опускание штырей (управл.)
void OPROS_SOST();				// "Опрос и запись состояния"
void PUSK_TP();					//Пуск ТП
//---------------------------------------------------------------------------
//--ФУНКЦИИ УСТРОЙСТВ--//
//---------------------------------------------------------------------------
void VIBPAR_DZASL();		    // подпрограмма "Выбор параметра для заслонки"
void PDDZASL();			    // подготовка аналоговых данных заслонки
void RLIMDZASL();	        	// расчет LIM для заслонки

void VIBPAR_GIR();	        // подпрограмма "Выбор параметра для ВЧГ ИП"
void RLIMGIR();		        // подпрограмма "Расчет LIM для ВЧГ ИП"
void PDGIR();			    // подготовка аналоговых данных ВЧГ ИП
void RKOEF_GIR();           // расчёт коэффициента

void VM_GIR();	// подпрограмма "Вкл. вых. мощ. ВЧГ"
void OM_GIR();	// подпрограмма "Окл. вых. мощ. ВЧГ"

void UPR_Klapan(unsigned int);

void MP_V();				// подпрограмма "Прижим вверх"
void MP_N();				// подпрограмма "Прижим вниз"
void VRR_GIR ();	        // подпрограмма "Выставить разр. работы ВЧГ ИП"
void ORR_GIR ();	        // подпрограмма "Снять разр. работы ВЧГ ИП"
bool KasVPaze();			// подпрограмма проверки нахождения кассеты между пазами
//---------------------------------------------------------------------------
//--RS-функции--//
//---------------------------------------------------------------------------
void VIDK_DZASL(int,int,int,int);
void VIDK_PER(unsigned char,unsigned char,int,bool,unsigned int);
void VIDK_POV(unsigned char,unsigned char,int,bool,unsigned int);
void VIDK_KAS(unsigned char,unsigned char,int,bool,unsigned int);
//---------------------------------------------------------------------------
//--Транспортные функции--//
//---------------------------------------------------------------------------
void SBROS_MEH();							// сброс механики
//int abs(int); // пользовательская функция модуля
#define PER 0
#define POV 1
#define KAS 1
#define ABS 1
#define OTN 2
extern
    void A_OUT(unsigned int Nmb, unsigned int Value);   // задание аналогового выхода
extern
    void SetOut(bool, unsigned char, unsigned int);     // управление дискретным сигналом	
#endif

